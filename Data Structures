1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

To determine the workload of figuring out weather a box of animal cracers contains an elephant we have the workload is determined by the number of operations. In this case we have only one operation O(n).

2.Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:

O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)

1.In the following cases, would a stack or queue be a more appropriate data structure?
    1.The process of loading and unloading pallets onto a flatbed truck
        Stack

    2.Putting bottle caps on bottles of beer as they roll down an assembly line
        Queue

    3.Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
        Queue

Describe two more situations where a queue would be an appropriate data structure.
    1. If we had a list of to do items
    2. A line of people waiting to purchase their items. 
    
Describe two more situations where a stack would be an appropriate data structure.
   1. if we were trying to figure out weather there were the correct number of open and closeing parenthesis or brackets in a line of code. 
   2. If we were getting cd's out of a cakebox spindle case. 


1.Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)
    "Apple", "Berry" and "Cherry" boxes are the nodes. The data is the information that each node contains ("Apple" "Berry" Cherry" strings). The head of the linked list points to the apple. This is the starting point for our llist. Apple uses next to point to berry which uses next to point to cherry which uses next to point to none. 

2.What’s the difference between doubly- and singly-linked lists?
    A single linked list starts at the head and and then each node points to the next node until we get to the tail and then none. A double linked list cen go forward or backwards. The second node doesn't only point to the third node, it can also point back to the first node. This makes navigating much easier as you can go either direstion.

3.Why is it faster to append to a linked list if we keep track of the tail as an attribute?
    It's faster because we know the endpoint and can go directly to the node that the tail is pointing to instead of having to iterate through the entire loop. O(1) if we know the tail, O(n) if we don't. 


1.Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? (Assume nodes are enqueued in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    Food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, burritos. 

2.Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? (Assume nodes are pushed in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    Food, Italian, Indian, Mexican, burritos, tacos, enchaladas, tikka masala, saag, lasagna, pizza, thin crust, chicgo-style. 

3.How is a binary search tree different from other trees?
    A binary search tree node had a max of 2 children and has a rule for arrangement. It should be faster to searchthough if balanced corrctly. It should be O(log n). 







